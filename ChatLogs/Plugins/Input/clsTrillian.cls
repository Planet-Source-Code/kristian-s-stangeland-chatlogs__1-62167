VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsTrillian"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

' Copyright (C) 2005 Kristian S. Stangeland

' This program is free software; you can redistribute it and/or
' modify it under the terms of the GNU General Public License
' as published by the Free Software Foundation; either version 2
' of the License, or (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

' The DOMDocument to use
Private DOMDocument As DOMDocument

Property Get FileFilter() As String

    ' The filter used to browse for such files
    FileFilter = "Trillian (*.xml)" & Chr(0) & "*.xml"
    
End Property

Property Get ParserHandleIO() As Boolean

    ' Whether or not the parser handles I/O iself
    ParserHandleIO = False

End Property

Property Get FileExtension() As String

    ' The file extension this parser uses
    FileExtension = "xml"
    
End Property

Property Get ParserDeliverString() As Boolean

    ' Whether or not we're awaiting a string or a byte array
    ParserDeliverString = True

End Property

Property Get ParserName() As String

    ' This parser is primary used to parse messenger plus
    ParserName = "Trillian"

End Property

Property Get ParserDescription() As String

    ' The description of this parser
    ParserDescription = "Used to parse logs generated by Trillian"

End Property

Public Sub ParseDocument(LogData As String, LogClass As Object)

    Dim Element As IXMLDOMElement, currSession As Object, oSender As Object, oReceiver As Collection

    ' Create a new empty document
    Set DOMDocument = New DOMDocument

    ' Load the XML-data
    DOMDocument.loadXML "<log>" & LogData & "</log>"

    ' Go through each element in the log-file
    For Each Element In DOMDocument.documentElement.childNodes

        ' See what type this element is
        Select Case Element.nodeName
        Case "session"
        
            ' Create a new session if this is a start-element
            If Element.Attributes.getNamedItem("type").nodeValue = "start" Then
            
                ' Create the new session
                Set currSession = LogClass.AddSession(GetDateOnly(GetDate(GetAttribute(Element, "time"))), Array(Array("", GetAttribute(Element, "from")), Array("", GetAttribute(Element, "to"))))
            
            End If
        
        Case "message"
        
            ' Clear the collection
            Set oReceiver = New Collection
            
            ' Now, get the sender and the receiver
            Set oSender = RetriveUser(currSession, GetAttribute(Element, "from"))
            oReceiver.Add RetriveUser(currSession, GetAttribute(Element, "to"))
            
            ' Set the nickname of the sender
            oSender.AppendNickName GetAttribute(Element, "from_display")
        
            ' Then, add the message
            currSession.AddMessage GetDate(GetAttribute(Element, "time")), oSender, oReceiver, GetAttribute(Element, "text")
        
        End Select
        
    Next

End Sub

Private Function GetDateOnly(dDate As Date) As Date

    ' Return only the date
    GetDateOnly = DateSerial(Year(dDate), Month(dDate), Day(dDate))

End Function

Private Function RetriveUser(Session As Object, sEmail As String) As Object

    Dim User As Object

    ' Go through each registered user
    For Each User In Session.Participants
    
        ' If the email matches, return the user
        If User.Email = sEmail Then
        
            ' Return the user
            Set RetriveUser = User

            ' We're finish searching
            Exit Function
        
        End If
    
    Next

End Function

Private Function GetAttribute(Element As IXMLDOMElement, AttributeName As String) As String
    
    On Error Resume Next
    Dim bBytes() As Byte
    
    ' Get the value of this attribute and convert it to a byte array, whilst decoding its URL-encoding
    bBytes = StrConv(DecodeUrl(Element.Attributes.getNamedItem(AttributeName).nodeValue), vbFromUnicode)

    ' Finally, return the value after converting it from UTF-8 to UTF-16
    GetAttribute = MBToUni(bBytes, CP_UTF8)

End Function

Private Function GetDate(ByVal lngNum As Long) As Date

    Dim lYear As Long, lMonth As Long, lDay As Long, lHour As Long, lMinute As Long
    
    ' First, extract all components of the value
    lYear = SubtractSeconds(lngNum, 31536000)
    lMonth = SubtractSeconds(lngNum, 2628000)
    lDay = SubtractSeconds(lngNum, 86400)
    lHour = SubtractSeconds(lngNum, 3600)
    lMinute = SubtractSeconds(lngNum, 60)
    
    ' Then, return the date
    GetDate = DateSerial(lYear + 1970, lMonth, lDay - 7) + TimeSerial(lHour, lMinute, lngNum)

End Function

Private Function SubtractSeconds(Seconds As Long, Value As Long) As Long

    ' Return the amount of seconds divided by the value
    SubtractSeconds = Seconds \ Value
    
    ' Subtract the resulting value
    Seconds = Seconds - (SubtractSeconds * Value)

End Function
