VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsGaimLog"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

' Copyright (C) 2005 Kristian S. Stangeland

' This program is free software; you can redistribute it and/or
' modify it under the terms of the GNU General Public License
' as published by the Free Software Foundation; either version 2
' of the License, or (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.

' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Property Get MenuCaption() As String

    ' This module dosen't require any caption
    MenuCaption = ""
    
End Property

Property Get FileFilter() As String

    ' The filter used to browse for such files
    FileFilter = "Gaim Chat-log (*.html)" & Chr(0) & "*.html"
    
End Property

Property Get FileExtension() As String

    ' The file extension this parser uses
    FileExtension = "html"
    
End Property

Property Get ExportName() As String

    ' This parser is primary used to parse messenger plus
    ExportName = "Gaim Chat-log"

End Property

Property Get ExportHandleAll() As Boolean

    ' If this output modules will do all the work by itself
    ExportHandleAll = False

End Property

Property Get ExportHandleIO() As Boolean

    ' Whether or not the export-function does all the I/O-operations itself
    ExportHandleIO = False

End Property

Property Get ExportMayAppend() As Boolean

    ' Whether or not the export-function returns the ENTIRE file-content or simply just what needs to be appended
    ExportMayAppend = False

End Property

Property Get ExporterDescription() As String

    ' The description of this parser
    ExporterDescription = "Used to export to the log-type generated by MSN Messenger"

End Property

Public Function GetSessionDate(Session As Object) As Date

    Dim oEvent As Object
    
    ' Search through all events
    For Each oEvent In Session.Events

        ' Search until we've found a message
        If oEvent.IsMessage Then
        
            ' Return the date and time for this message
            GetSessionDate = oEvent.MessageDate
            
            ' We're finish now
            Exit Function
        
        End If

    Next

End Function

Public Function RetriveName(Session As Object, userIndex As Long) As String
    
    Dim dDate As Date
    
    ' Get the date of this session
    dDate = GetSessionDate(Session)
    
    ' Include the date of this session
    RetriveName = Session.Participants(userIndex).Email & "\" & GetDateOnly(dDate) & "." & DateDiff("s", GetDateOnly(dDate), dDate)

End Function

Public Function ExportLog(Session As Object, sExistingFile As String, FileOperation As Object) As String

    On Error Resume Next

    ' We cannot use XMLDOM in this case
    Dim Document As New clsStringClass, sTitle As String, sSender As String
    Dim oEvent As Object, bData() As Byte, Free As Long
    
    ' Retrive the title of this session
    sTitle = "Conversation with " & Session.Participants(2).Email & " at " & GetSessionDate(Session) & " on " & Session.Participants(1).Email & " (msn)"

    ' Firstly, add the beginning line
    Document.AppendString "<html><head><title>" & sTitle & "</title></head><body><h3>" & sTitle & "</h3>" & vbCrLf

    ' Then begin adding all events
    For Each oEvent In Session.Events
    
        ' Get the name of the sender
        sSender = oEvent.Sender.NickName
    
        ' Add a line depending on what type this event is
        If oEvent.IsMessage Then
        
            ' Add the message
            Document.AppendString "<font color=" & Chr(34) & IIf(oEvent.Sender Is Session.Participants(1), _
             "#16569E", "#A82F2F") & Chr(34) & "><font size=""2"">(" & GetTimeOnly(oEvent.MessageDate) & _
              ")</font> <b>" & sSender & ":</b></font> "
        
            ' The following elements will be added depending there are style-information included
            If oEvent.Style <> "" Then
            
                ' Add the text
                Document.AppendString "<font sml=""MSN""><span style='" & Replace(oEvent.Style, vbCrLf, "") & "'>"
                ConvertString oEvent.Text, Document
                Document.AppendString "</span></font><br/>" & vbCrLf
    
            Else
            
                ' Add the text
                Document.AppendString "<font sml=""MSN"">"
                ConvertString oEvent.Text, Document
                Document.AppendString "</font><br/>" & vbCrLf
            
            End If
        
        Else
        
            ' Add the event
            Document.AppendString "<font size=""2"">(" & GetTimeOnly(oEvent.EventDate) & ")</font><b> "
            ConvertString oEvent.Text, Document
            Document.AppendString "</b><br/>" & vbCrLf
        
        End If
        
    Next

    ' Retrive the data to save
    bData = UniToMB(Document.ToString, CP_UTF8)

    ' Get a free handle
    Free = FreeFile

    ' Then, save it to the file
    Open sExistingFile For Binary As #Free
        Put #Free, , bData
    Close #Free

End Function

Private Function GetTimeOnly(dDate As Date) As Date

    ' Return only the time
    GetTimeOnly = TimeSerial(Hour(dDate), Minute(dDate), Second(dDate))

End Function

Private Function GetDateOnly(dDate As Date) As Date

    ' Return only the date
    GetDateOnly = DateSerial(Year(dDate), Month(dDate), Day(dDate))

End Function
